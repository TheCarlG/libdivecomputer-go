// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Fri, 01 Jun 2018 23:25:14 CEST.
// By https://git.io/c-for-go. DO NOT EDIT.

package core

/*
#cgo pkg-config: libdivecomputer
#include <stddef.h>
#include "libdivecomputer/parser.h"
#include "libdivecomputer/device.h"
#include "libdivecomputer/version.h"
#include "libdivecomputer/context.h"
#include "libdivecomputer/descriptor.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// ParserNew function as declared in libdivecomputer/parser.h:223
func ParserNew(parser **Parser, device *Device) Status {
	cparser, _ := (**C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_parser_new(cparser, cdevice)
	__v := (Status)(__ret)
	return __v
}

// ParserNew2 function as declared in libdivecomputer/parser.h:226
func ParserNew2(parser **Parser, context *Context, descriptor *Descriptor, devtime uint32, systime Ticks) Status {
	cparser, _ := (**C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	cdevtime, _ := (C.uint)(devtime), cgoAllocsUnknown
	csystime, _ := (C.dc_ticks_t)(systime), cgoAllocsUnknown
	__ret := C.dc_parser_new2(cparser, ccontext, cdescriptor, cdevtime, csystime)
	__v := (Status)(__ret)
	return __v
}

// ParserGetType function as declared in libdivecomputer/parser.h:229
func ParserGetType(parser *Parser) Family {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	__ret := C.dc_parser_get_type(cparser)
	__v := (Family)(__ret)
	return __v
}

// ParserSetData function as declared in libdivecomputer/parser.h:232
func ParserSetData(parser *Parser, data string, size uint32) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_parser_set_data(cparser, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// ParserGetDatetime function as declared in libdivecomputer/parser.h:235
func ParserGetDatetime(parser *Parser, datetime *Datetime) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	cdatetime, _ := datetime.PassRef()
	__ret := C.dc_parser_get_datetime(cparser, cdatetime)
	__v := (Status)(__ret)
	return __v
}

// ParserGetField function as declared in libdivecomputer/parser.h:238
func ParserGetField(parser *Parser, kind FieldType, flags uint32, value unsafe.Pointer) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	ckind, _ := (C.dc_field_type_t)(kind), cgoAllocsUnknown
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	cvalue, _ := value, cgoAllocsUnknown
	__ret := C.dc_parser_get_field(cparser, ckind, cflags, cvalue)
	__v := (Status)(__ret)
	return __v
}

// ParserSamplesForeach function as declared in libdivecomputer/parser.h:241
func ParserSamplesForeach(parser *Parser, callback SampleCallback, userdata unsafe.Pointer) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_parser_samples_foreach(cparser, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// ParserDestroy function as declared in libdivecomputer/parser.h:244
func ParserDestroy(parser *Parser) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	__ret := C.dc_parser_destroy(cparser)
	__v := (Status)(__ret)
	return __v
}

// ContextNew function as declared in libdivecomputer/context.h:45
func ContextNew(context **Context) Status {
	ccontext, _ := (**C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.dc_context_new(ccontext)
	__v := (Status)(__ret)
	return __v
}

// ContextFree function as declared in libdivecomputer/context.h:48
func ContextFree(context *Context) Status {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.dc_context_free(ccontext)
	__v := (Status)(__ret)
	return __v
}

// ContextSetLoglevel function as declared in libdivecomputer/context.h:51
func ContextSetLoglevel(context *Context, loglevel Loglevel) Status {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cloglevel, _ := (C.dc_loglevel_t)(loglevel), cgoAllocsUnknown
	__ret := C.dc_context_set_loglevel(ccontext, cloglevel)
	__v := (Status)(__ret)
	return __v
}

// ContextSetLogfunc function as declared in libdivecomputer/context.h:54
func ContextSetLogfunc(context *Context, logfunc Logfunc, userdata unsafe.Pointer) Status {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	clogfunc, _ := logfunc.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_context_set_logfunc(ccontext, clogfunc, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DescriptorIterator function as declared in libdivecomputer/descriptor.h:44
func DescriptorIterator(iterator **Iterator) Status {
	citerator, _ := (**C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	__ret := C.dc_descriptor_iterator(citerator)
	__v := (Status)(__ret)
	return __v
}

// DescriptorFree function as declared in libdivecomputer/descriptor.h:47
func DescriptorFree(descriptor *Descriptor) {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	C.dc_descriptor_free(cdescriptor)
}

// DescriptorGetVendor function as declared in libdivecomputer/descriptor.h:49
func DescriptorGetVendor(descriptor *Descriptor) string {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_vendor(cdescriptor)
	__v := packPCharString(__ret)
	return __v
}

// DescriptorGetProduct function as declared in libdivecomputer/descriptor.h:52
func DescriptorGetProduct(descriptor *Descriptor) string {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_product(cdescriptor)
	__v := packPCharString(__ret)
	return __v
}

// DescriptorGetType function as declared in libdivecomputer/descriptor.h:56
func DescriptorGetType(descriptor *Descriptor) Family {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_type(cdescriptor)
	__v := (Family)(__ret)
	return __v
}

// DescriptorGetModel function as declared in libdivecomputer/descriptor.h:59
func DescriptorGetModel(descriptor *Descriptor) uint32 {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_model(cdescriptor)
	__v := (uint32)(__ret)
	return __v
}

// DescriptorGetTransport function as declared in libdivecomputer/descriptor.h:62
func DescriptorGetTransport(descriptor *Descriptor) Transport {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_transport(cdescriptor)
	__v := (Transport)(__ret)
	return __v
}

// IteratorNext function as declared in libdivecomputer/iterator.h:34
func IteratorNext(iterator *Iterator, item unsafe.Pointer) Status {
	citerator, _ := (*C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	citem, _ := item, cgoAllocsUnknown
	__ret := C.dc_iterator_next(citerator, citem)
	__v := (Status)(__ret)
	return __v
}

// IteratorFree function as declared in libdivecomputer/iterator.h:37
func IteratorFree(iterator *Iterator) Status {
	citerator, _ := (*C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	__ret := C.dc_iterator_free(citerator)
	__v := (Status)(__ret)
	return __v
}

// DeviceOpen function as declared in libdivecomputer/device.h:73
func DeviceOpen(out **Device, context *Context, descriptor *Descriptor, name string) Status {
	cout, _ := (**C.dc_device_t)(unsafe.Pointer(out)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.dc_device_open(cout, ccontext, cdescriptor, cname)
	__v := (Status)(__ret)
	return __v
}

// DeviceGetType function as declared in libdivecomputer/device.h:76
func DeviceGetType(device *Device) Family {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_device_get_type(cdevice)
	__v := (Family)(__ret)
	return __v
}

// DeviceSetCancel function as declared in libdivecomputer/device.h:79
func DeviceSetCancel(device *Device, callback CancelCallback, userdata unsafe.Pointer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_device_set_cancel(cdevice, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DeviceSetEvents function as declared in libdivecomputer/device.h:82
func DeviceSetEvents(device *Device, events uint32, callback EventCallback, userdata unsafe.Pointer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cevents, _ := (C.uint)(events), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_device_set_events(cdevice, cevents, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DeviceSetFingerprint function as declared in libdivecomputer/device.h:85
func DeviceSetFingerprint(device *Device, data string, size uint32) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_device_set_fingerprint(cdevice, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// DeviceRead function as declared in libdivecomputer/device.h:88
func DeviceRead(device *Device, address uint32, data []byte, size uint32) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	caddress, _ := (C.uint)(address), cgoAllocsUnknown
	cdata, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_device_read(cdevice, caddress, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// DeviceWrite function as declared in libdivecomputer/device.h:91
func DeviceWrite(device *Device, address uint32, data string, size uint32) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	caddress, _ := (C.uint)(address), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_device_write(cdevice, caddress, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// DeviceDump function as declared in libdivecomputer/device.h:94
func DeviceDump(device *Device, buffer *Buffer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_device_dump(cdevice, cbuffer)
	__v := (Status)(__ret)
	return __v
}

// DeviceForeach function as declared in libdivecomputer/device.h:97
func DeviceForeach(device *Device, callback DiveCallback, userdata unsafe.Pointer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_device_foreach(cdevice, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DeviceTimesync function as declared in libdivecomputer/device.h:100
func DeviceTimesync(device []Device, datetime []Datetime) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&device)).Data)), cgoAllocsUnknown
	cdatetime, _ := unpackArgSDatetime(datetime)
	__ret := C.dc_device_timesync(cdevice, cdatetime)
	packSDatetime(datetime, cdatetime)
	__v := (Status)(__ret)
	return __v
}

// DeviceClose function as declared in libdivecomputer/device.h:103
func DeviceClose(device *Device) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_device_close(cdevice)
	__v := (Status)(__ret)
	return __v
}

// BufferNew function as declared in libdivecomputer/buffer.h:33
func BufferNew(capacity uint) *Buffer {
	ccapacity, _ := (C.size_t)(capacity), cgoAllocsUnknown
	__ret := C.dc_buffer_new(ccapacity)
	__v := *(**Buffer)(unsafe.Pointer(&__ret))
	return __v
}

// BufferFree function as declared in libdivecomputer/buffer.h:37
func BufferFree(buffer *Buffer) {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	C.dc_buffer_free(cbuffer)
}

// BufferClear function as declared in libdivecomputer/buffer.h:40
func BufferClear(buffer *Buffer) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_buffer_clear(cbuffer)
	__v := (int32)(__ret)
	return __v
}

// BufferReserve function as declared in libdivecomputer/buffer.h:43
func BufferReserve(buffer *Buffer, capacity uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	ccapacity, _ := (C.size_t)(capacity), cgoAllocsUnknown
	__ret := C.dc_buffer_reserve(cbuffer, ccapacity)
	__v := (int32)(__ret)
	return __v
}

// BufferResize function as declared in libdivecomputer/buffer.h:46
func BufferResize(buffer *Buffer, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_resize(cbuffer, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferAppend function as declared in libdivecomputer/buffer.h:49
func BufferAppend(buffer *Buffer, data string, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_append(cbuffer, cdata, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferPrepend function as declared in libdivecomputer/buffer.h:52
func BufferPrepend(buffer *Buffer, data string, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_prepend(cbuffer, cdata, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferSlice function as declared in libdivecomputer/buffer.h:55
func BufferSlice(buffer *Buffer, offset uint, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	coffset, _ := (C.size_t)(offset), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_slice(cbuffer, coffset, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferGetSize function as declared in libdivecomputer/buffer.h:58
func BufferGetSize(buffer *Buffer) uint {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_buffer_get_size(cbuffer)
	__v := (uint)(__ret)
	return __v
}

// BufferGetData function as declared in libdivecomputer/buffer.h:60
func BufferGetData(buffer *Buffer) *byte {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_buffer_get_data(cbuffer)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// DatetimeNow function as declared in libdivecomputer/datetime.h:48
func DatetimeNow() Ticks {
	__ret := C.dc_datetime_now()
	__v := (Ticks)(__ret)
	return __v
}

// DatetimeLocaltime function as declared in libdivecomputer/datetime.h:50
func DatetimeLocaltime(result *Datetime, ticks Ticks) *Datetime {
	cresult, _ := result.PassRef()
	cticks, _ := (C.dc_ticks_t)(ticks), cgoAllocsUnknown
	__ret := C.dc_datetime_localtime(cresult, cticks)
	__v := NewDatetimeRef(unsafe.Pointer(__ret))
	return __v
}

// DatetimeGmtime function as declared in libdivecomputer/datetime.h:54
func DatetimeGmtime(result *Datetime, ticks Ticks) *Datetime {
	cresult, _ := result.PassRef()
	cticks, _ := (C.dc_ticks_t)(ticks), cgoAllocsUnknown
	__ret := C.dc_datetime_gmtime(cresult, cticks)
	__v := NewDatetimeRef(unsafe.Pointer(__ret))
	return __v
}

// DatetimeMktime function as declared in libdivecomputer/datetime.h:59
func DatetimeMktime(dt *Datetime) Ticks {
	cdt, _ := dt.PassRef()
	__ret := C.dc_datetime_mktime(cdt)
	__v := (Ticks)(__ret)
	return __v
}

// VersionGet function as declared in libdivecomputer/version.h:46
func VersionGet(version *Version) string {
	cversion, _ := version.PassRef()
	__ret := C.dc_version(cversion)
	__v := packPCharString(__ret)
	return __v
}

// VersionGetCheck function as declared in libdivecomputer/version.h:50
func VersionGetCheck(major uint32, minor uint32, micro uint32) int32 {
	cmajor, _ := (C.uint)(major), cgoAllocsUnknown
	cminor, _ := (C.uint)(minor), cgoAllocsUnknown
	cmicro, _ := (C.uint)(micro), cgoAllocsUnknown
	__ret := C.dc_version_check(cmajor, cminor, cmicro)
	__v := (int32)(__ret)
	return __v
}
