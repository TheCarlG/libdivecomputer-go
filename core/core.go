// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 05 Jun 2018 17:46:50 CEST.
// By https://git.io/c-for-go. DO NOT EDIT.

package core

/*
#cgo pkg-config: libdivecomputer
#include "libdivecomputer/device.h"
#include "libdivecomputer/parser.h"
#include "libdivecomputer/version.h"
#include "libdivecomputer/bluetooth.h"
#include "libdivecomputer/irda.h"
#include "libdivecomputer/serial.h"
#include "libdivecomputer/usbhid.h"
#include "libdivecomputer/custom.h"
#include "libdivecomputer/context.h"
#include "libdivecomputer/descriptor.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// DeviceOpen function as declared in libdivecomputer/device.h:74
func DeviceOpen(out **Device, context *Context, descriptor *Descriptor, iostream *Iostream) Status {
	cout, _ := (**C.dc_device_t)(unsafe.Pointer(out)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	__ret := C.dc_device_open(cout, ccontext, cdescriptor, ciostream)
	__v := (Status)(__ret)
	return __v
}

// DeviceGetType function as declared in libdivecomputer/device.h:77
func DeviceGetType(device *Device) Family {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_device_get_type(cdevice)
	__v := (Family)(__ret)
	return __v
}

// DeviceSetCancel function as declared in libdivecomputer/device.h:80
func DeviceSetCancel(device *Device, callback CancelCallback, userdata unsafe.Pointer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_device_set_cancel(cdevice, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DeviceSetEvents function as declared in libdivecomputer/device.h:83
func DeviceSetEvents(device *Device, events uint32, callback EventCallback, userdata unsafe.Pointer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cevents, _ := (C.uint)(events), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_device_set_events(cdevice, cevents, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DeviceSetFingerprint function as declared in libdivecomputer/device.h:86
func DeviceSetFingerprint(device *Device, data string, size uint32) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_device_set_fingerprint(cdevice, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// DeviceRead function as declared in libdivecomputer/device.h:89
func DeviceRead(device *Device, address uint32, data []byte, size uint32) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	caddress, _ := (C.uint)(address), cgoAllocsUnknown
	cdata, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_device_read(cdevice, caddress, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// DeviceWrite function as declared in libdivecomputer/device.h:92
func DeviceWrite(device *Device, address uint32, data string, size uint32) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	caddress, _ := (C.uint)(address), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_device_write(cdevice, caddress, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// DeviceDump function as declared in libdivecomputer/device.h:95
func DeviceDump(device *Device, buffer *Buffer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_device_dump(cdevice, cbuffer)
	__v := (Status)(__ret)
	return __v
}

// DeviceForeach function as declared in libdivecomputer/device.h:98
func DeviceForeach(device *Device, callback DiveCallback, userdata unsafe.Pointer) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_device_foreach(cdevice, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// DeviceTimesync function as declared in libdivecomputer/device.h:101
func DeviceTimesync(device *Device, datetime *Datetime) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	cdatetime, _ := datetime.PassRef()
	__ret := C.dc_device_timesync(cdevice, cdatetime)
	__v := (Status)(__ret)
	return __v
}

// DeviceClose function as declared in libdivecomputer/device.h:104
func DeviceClose(device *Device) Status {
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_device_close(cdevice)
	__v := (Status)(__ret)
	return __v
}

// ContextNew function as declared in libdivecomputer/context.h:45
func ContextNew(context **Context) Status {
	ccontext, _ := (**C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.dc_context_new(ccontext)
	__v := (Status)(__ret)
	return __v
}

// ContextFree function as declared in libdivecomputer/context.h:48
func ContextFree(context *Context) Status {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.dc_context_free(ccontext)
	__v := (Status)(__ret)
	return __v
}

// ContextSetLoglevel function as declared in libdivecomputer/context.h:51
func ContextSetLoglevel(context *Context, loglevel Loglevel) Status {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cloglevel, _ := (C.dc_loglevel_t)(loglevel), cgoAllocsUnknown
	__ret := C.dc_context_set_loglevel(ccontext, cloglevel)
	__v := (Status)(__ret)
	return __v
}

// ContextSetLogfunc function as declared in libdivecomputer/context.h:54
func ContextSetLogfunc(context *Context, logfunc Logfunc, userdata unsafe.Pointer) Status {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	clogfunc, _ := logfunc.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_context_set_logfunc(ccontext, clogfunc, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// ContextGetTransports function as declared in libdivecomputer/context.h:57
func ContextGetTransports(context *Context) uint32 {
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.dc_context_get_transports(ccontext)
	__v := (uint32)(__ret)
	return __v
}

// DescriptorIterator function as declared in libdivecomputer/descriptor.h:35
func DescriptorIterator(iterator **Iterator) Status {
	citerator, _ := (**C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	__ret := C.dc_descriptor_iterator(citerator)
	__v := (Status)(__ret)
	return __v
}

// DescriptorFree function as declared in libdivecomputer/descriptor.h:38
func DescriptorFree(descriptor *Descriptor) {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	C.dc_descriptor_free(cdescriptor)
}

// DescriptorGetVendor function as declared in libdivecomputer/descriptor.h:40
func DescriptorGetVendor(descriptor *Descriptor) string {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_vendor(cdescriptor)
	__v := packPCharString(__ret)
	return __v
}

// DescriptorGetProduct function as declared in libdivecomputer/descriptor.h:43
func DescriptorGetProduct(descriptor *Descriptor) string {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_product(cdescriptor)
	__v := packPCharString(__ret)
	return __v
}

// DescriptorGetType function as declared in libdivecomputer/descriptor.h:47
func DescriptorGetType(descriptor *Descriptor) Family {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_type(cdescriptor)
	__v := (Family)(__ret)
	return __v
}

// DescriptorGetModel function as declared in libdivecomputer/descriptor.h:50
func DescriptorGetModel(descriptor *Descriptor) uint32 {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_model(cdescriptor)
	__v := (uint32)(__ret)
	return __v
}

// DescriptorGetTransports function as declared in libdivecomputer/descriptor.h:53
func DescriptorGetTransports(descriptor *Descriptor) uint32 {
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_descriptor_get_transports(cdescriptor)
	__v := (uint32)(__ret)
	return __v
}

// IteratorNext function as declared in libdivecomputer/iterator.h:34
func IteratorNext(iterator *Iterator, item unsafe.Pointer) Status {
	citerator, _ := (*C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	citem, _ := item, cgoAllocsUnknown
	__ret := C.dc_iterator_next(citerator, citem)
	__v := (Status)(__ret)
	return __v
}

// IteratorFree function as declared in libdivecomputer/iterator.h:37
func IteratorFree(iterator *Iterator) Status {
	citerator, _ := (*C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	__ret := C.dc_iterator_free(citerator)
	__v := (Status)(__ret)
	return __v
}

// IostreamGetTransport function as declared in libdivecomputer/iostream.h:93
func IostreamGetTransport(iostream *Iostream) Transport {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	__ret := C.dc_iostream_get_transport(ciostream)
	__v := (Transport)(__ret)
	return __v
}

// IostreamSetTimeout function as declared in libdivecomputer/iostream.h:124
func IostreamSetTimeout(iostream *Iostream, timeout int32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	ctimeout, _ := (C.int)(timeout), cgoAllocsUnknown
	__ret := C.dc_iostream_set_timeout(ciostream, ctimeout)
	__v := (Status)(__ret)
	return __v
}

// IostreamSetLatency function as declared in libdivecomputer/iostream.h:140
func IostreamSetLatency(iostream *Iostream, value uint32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.dc_iostream_set_latency(ciostream, cvalue)
	__v := (Status)(__ret)
	return __v
}

// IostreamSetBreak function as declared in libdivecomputer/iostream.h:151
func IostreamSetBreak(iostream *Iostream, value uint32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.dc_iostream_set_break(ciostream, cvalue)
	__v := (Status)(__ret)
	return __v
}

// IostreamSetDtr function as declared in libdivecomputer/iostream.h:162
func IostreamSetDtr(iostream *Iostream, value uint32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.dc_iostream_set_dtr(ciostream, cvalue)
	__v := (Status)(__ret)
	return __v
}

// IostreamSetRts function as declared in libdivecomputer/iostream.h:173
func IostreamSetRts(iostream *Iostream, value uint32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cvalue, _ := (C.uint)(value), cgoAllocsUnknown
	__ret := C.dc_iostream_set_rts(ciostream, cvalue)
	__v := (Status)(__ret)
	return __v
}

// IostreamGetLines function as declared in libdivecomputer/iostream.h:185
func IostreamGetLines(iostream *Iostream, value []uint32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cvalue, _ := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.dc_iostream_get_lines(ciostream, cvalue)
	__v := (Status)(__ret)
	return __v
}

// IostreamGetAvailable function as declared in libdivecomputer/iostream.h:197
func IostreamGetAvailable(iostream *Iostream, value []uint) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cvalue, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.dc_iostream_get_available(ciostream, cvalue)
	__v := (Status)(__ret)
	return __v
}

// IostreamConfigure function as declared in libdivecomputer/iostream.h:212
func IostreamConfigure(iostream *Iostream, baudrate uint32, databits uint32, parity Parity, stopbits Stopbits, flowcontrol Flowcontrol) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cbaudrate, _ := (C.uint)(baudrate), cgoAllocsUnknown
	cdatabits, _ := (C.uint)(databits), cgoAllocsUnknown
	cparity, _ := (C.dc_parity_t)(parity), cgoAllocsUnknown
	cstopbits, _ := (C.dc_stopbits_t)(stopbits), cgoAllocsUnknown
	cflowcontrol, _ := (C.dc_flowcontrol_t)(flowcontrol), cgoAllocsUnknown
	__ret := C.dc_iostream_configure(ciostream, cbaudrate, cdatabits, cparity, cstopbits, cflowcontrol)
	__v := (Status)(__ret)
	return __v
}

// IostreamRead function as declared in libdivecomputer/iostream.h:226
func IostreamRead(iostream *Iostream, data unsafe.Pointer, size uint, actual []uint) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cdata, _ := data, cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cactual, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&actual)).Data)), cgoAllocsUnknown
	__ret := C.dc_iostream_read(ciostream, cdata, csize, cactual)
	__v := (Status)(__ret)
	return __v
}

// IostreamWrite function as declared in libdivecomputer/iostream.h:240
func IostreamWrite(iostream *Iostream, data unsafe.Pointer, size uint, actual []uint) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cdata, _ := data, cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	cactual, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&actual)).Data)), cgoAllocsUnknown
	__ret := C.dc_iostream_write(ciostream, cdata, csize, cactual)
	__v := (Status)(__ret)
	return __v
}

// IostreamFlush function as declared in libdivecomputer/iostream.h:251
func IostreamFlush(iostream *Iostream) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	__ret := C.dc_iostream_flush(ciostream)
	__v := (Status)(__ret)
	return __v
}

// IostreamPurge function as declared in libdivecomputer/iostream.h:262
func IostreamPurge(iostream *Iostream, direction Direction) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cdirection, _ := (C.dc_direction_t)(direction), cgoAllocsUnknown
	__ret := C.dc_iostream_purge(ciostream, cdirection)
	__v := (Status)(__ret)
	return __v
}

// IostreamSleep function as declared in libdivecomputer/iostream.h:274
func IostreamSleep(iostream *Iostream, milliseconds uint32) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	cmilliseconds, _ := (C.uint)(milliseconds), cgoAllocsUnknown
	__ret := C.dc_iostream_sleep(ciostream, cmilliseconds)
	__v := (Status)(__ret)
	return __v
}

// IostreamClose function as declared in libdivecomputer/iostream.h:284
func IostreamClose(iostream *Iostream) Status {
	ciostream, _ := (*C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	__ret := C.dc_iostream_close(ciostream)
	__v := (Status)(__ret)
	return __v
}

// BufferNew function as declared in libdivecomputer/buffer.h:33
func BufferNew(capacity uint) *Buffer {
	ccapacity, _ := (C.size_t)(capacity), cgoAllocsUnknown
	__ret := C.dc_buffer_new(ccapacity)
	__v := *(**Buffer)(unsafe.Pointer(&__ret))
	return __v
}

// BufferFree function as declared in libdivecomputer/buffer.h:37
func BufferFree(buffer *Buffer) {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	C.dc_buffer_free(cbuffer)
}

// BufferClear function as declared in libdivecomputer/buffer.h:40
func BufferClear(buffer *Buffer) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_buffer_clear(cbuffer)
	__v := (int32)(__ret)
	return __v
}

// BufferReserve function as declared in libdivecomputer/buffer.h:43
func BufferReserve(buffer *Buffer, capacity uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	ccapacity, _ := (C.size_t)(capacity), cgoAllocsUnknown
	__ret := C.dc_buffer_reserve(cbuffer, ccapacity)
	__v := (int32)(__ret)
	return __v
}

// BufferResize function as declared in libdivecomputer/buffer.h:46
func BufferResize(buffer *Buffer, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_resize(cbuffer, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferAppend function as declared in libdivecomputer/buffer.h:49
func BufferAppend(buffer *Buffer, data string, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_append(cbuffer, cdata, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferPrepend function as declared in libdivecomputer/buffer.h:52
func BufferPrepend(buffer *Buffer, data string, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_prepend(cbuffer, cdata, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferSlice function as declared in libdivecomputer/buffer.h:55
func BufferSlice(buffer *Buffer, offset uint, size uint) int32 {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	coffset, _ := (C.size_t)(offset), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_buffer_slice(cbuffer, coffset, csize)
	__v := (int32)(__ret)
	return __v
}

// BufferGetSize function as declared in libdivecomputer/buffer.h:58
func BufferGetSize(buffer *Buffer) uint {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_buffer_get_size(cbuffer)
	__v := (uint)(__ret)
	return __v
}

// BufferGetData function as declared in libdivecomputer/buffer.h:60
func BufferGetData(buffer *Buffer) *byte {
	cbuffer, _ := (*C.dc_buffer_t)(unsafe.Pointer(buffer)), cgoAllocsUnknown
	__ret := C.dc_buffer_get_data(cbuffer)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// DatetimeNow function as declared in libdivecomputer/datetime.h:48
func DatetimeNow() Ticks {
	__ret := C.dc_datetime_now()
	__v := (Ticks)(__ret)
	return __v
}

// DatetimeLocaltime function as declared in libdivecomputer/datetime.h:50
func DatetimeLocaltime(result *Datetime, ticks Ticks) *Datetime {
	cresult, _ := result.PassRef()
	cticks, _ := (C.dc_ticks_t)(ticks), cgoAllocsUnknown
	__ret := C.dc_datetime_localtime(cresult, cticks)
	__v := NewDatetimeRef(unsafe.Pointer(__ret))
	return __v
}

// DatetimeGmtime function as declared in libdivecomputer/datetime.h:54
func DatetimeGmtime(result *Datetime, ticks Ticks) *Datetime {
	cresult, _ := result.PassRef()
	cticks, _ := (C.dc_ticks_t)(ticks), cgoAllocsUnknown
	__ret := C.dc_datetime_gmtime(cresult, cticks)
	__v := NewDatetimeRef(unsafe.Pointer(__ret))
	return __v
}

// DatetimeMktime function as declared in libdivecomputer/datetime.h:59
func DatetimeMktime(dt *Datetime) Ticks {
	cdt, _ := dt.PassRef()
	__ret := C.dc_datetime_mktime(cdt)
	__v := (Ticks)(__ret)
	return __v
}

// ParserNew function as declared in libdivecomputer/parser.h:227
func ParserNew(parser **Parser, device *Device) Status {
	cparser, _ := (**C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	cdevice, _ := (*C.dc_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_parser_new(cparser, cdevice)
	__v := (Status)(__ret)
	return __v
}

// ParserNew2 function as declared in libdivecomputer/parser.h:230
func ParserNew2(parser **Parser, context *Context, descriptor *Descriptor, devtime uint32, systime Ticks) Status {
	cparser, _ := (**C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	cdevtime, _ := (C.uint)(devtime), cgoAllocsUnknown
	csystime, _ := (C.dc_ticks_t)(systime), cgoAllocsUnknown
	__ret := C.dc_parser_new2(cparser, ccontext, cdescriptor, cdevtime, csystime)
	__v := (Status)(__ret)
	return __v
}

// ParserGetType function as declared in libdivecomputer/parser.h:233
func ParserGetType(parser *Parser) Family {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	__ret := C.dc_parser_get_type(cparser)
	__v := (Family)(__ret)
	return __v
}

// ParserSetData function as declared in libdivecomputer/parser.h:236
func ParserSetData(parser *Parser, data string, size uint32) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	cdata, _ := unpackPUcharString(data)
	csize, _ := (C.uint)(size), cgoAllocsUnknown
	__ret := C.dc_parser_set_data(cparser, cdata, csize)
	__v := (Status)(__ret)
	return __v
}

// ParserGetDatetime function as declared in libdivecomputer/parser.h:239
func ParserGetDatetime(parser *Parser, datetime *Datetime) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	cdatetime, _ := datetime.PassRef()
	__ret := C.dc_parser_get_datetime(cparser, cdatetime)
	__v := (Status)(__ret)
	return __v
}

// ParserGetField function as declared in libdivecomputer/parser.h:242
func ParserGetField(parser *Parser, kind FieldType, flags uint32, value unsafe.Pointer) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	ckind, _ := (C.dc_field_type_t)(kind), cgoAllocsUnknown
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	cvalue, _ := value, cgoAllocsUnknown
	__ret := C.dc_parser_get_field(cparser, ckind, cflags, cvalue)
	__v := (Status)(__ret)
	return __v
}

// ParserSamplesForeach function as declared in libdivecomputer/parser.h:245
func ParserSamplesForeach(parser *Parser, callback SampleCallback, userdata unsafe.Pointer) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	ccallback, _ := callback.PassValue()
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_parser_samples_foreach(cparser, ccallback, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// ParserDestroy function as declared in libdivecomputer/parser.h:248
func ParserDestroy(parser *Parser) Status {
	cparser, _ := (*C.dc_parser_t)(unsafe.Pointer(parser)), cgoAllocsUnknown
	__ret := C.dc_parser_destroy(cparser)
	__v := (Status)(__ret)
	return __v
}

// BluetoothAddr2str function as declared in libdivecomputer/bluetooth.h:62
func BluetoothAddr2str(address BluetoothAddress, str []byte, size uint) *byte {
	caddress, _ := (C.dc_bluetooth_address_t)(address), cgoAllocsUnknown
	cstr, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&str)).Data)), cgoAllocsUnknown
	csize, _ := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.dc_bluetooth_addr2str(caddress, cstr, csize)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// BluetoothStr2addr function as declared in libdivecomputer/bluetooth.h:76
func BluetoothStr2addr(address string) BluetoothAddress {
	caddress, _ := unpackPCharString(address)
	__ret := C.dc_bluetooth_str2addr(caddress)
	__v := (BluetoothAddress)(__ret)
	return __v
}

// BluetoothDeviceGetAddress function as declared in libdivecomputer/bluetooth.h:89
func BluetoothDeviceGetAddress(device *BluetoothDevice) BluetoothAddress {
	cdevice, _ := (*C.dc_bluetooth_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_bluetooth_device_get_address(cdevice)
	__v := (BluetoothAddress)(__ret)
	return __v
}

// BluetoothDeviceGetName function as declared in libdivecomputer/bluetooth.h:96
func BluetoothDeviceGetName(device *BluetoothDevice) string {
	cdevice, _ := (*C.dc_bluetooth_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_bluetooth_device_get_name(cdevice)
	__v := packPCharString(__ret)
	return __v
}

// BluetoothDeviceFree function as declared in libdivecomputer/bluetooth.h:105
func BluetoothDeviceFree(device *BluetoothDevice) {
	cdevice, _ := (*C.dc_bluetooth_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	C.dc_bluetooth_device_free(cdevice)
}

// BluetoothIteratorNew function as declared in libdivecomputer/bluetooth.h:117
func BluetoothIteratorNew(iterator **Iterator, context *Context, descriptor *Descriptor) Status {
	citerator, _ := (**C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_bluetooth_iterator_new(citerator, ccontext, cdescriptor)
	__v := (Status)(__ret)
	return __v
}

// BluetoothOpen function as declared in libdivecomputer/bluetooth.h:130
func BluetoothOpen(iostream **Iostream, context *Context, address BluetoothAddress, port uint32) Status {
	ciostream, _ := (**C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	caddress, _ := (C.dc_bluetooth_address_t)(address), cgoAllocsUnknown
	cport, _ := (C.uint)(port), cgoAllocsUnknown
	__ret := C.dc_bluetooth_open(ciostream, ccontext, caddress, cport)
	__v := (Status)(__ret)
	return __v
}

// CustomOpen function as declared in libdivecomputer/custom.h:61
func CustomOpen(iostream **Iostream, context *Context, transport Transport, callbacks *CustomCbs, userdata unsafe.Pointer) Status {
	ciostream, _ := (**C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	ctransport, _ := (C.dc_transport_t)(transport), cgoAllocsUnknown
	ccallbacks, _ := (*C.dc_custom_cbs_t)(unsafe.Pointer(callbacks)), cgoAllocsUnknown
	cuserdata, _ := userdata, cgoAllocsUnknown
	__ret := C.dc_custom_open(ciostream, ccontext, ctransport, ccallbacks, cuserdata)
	__v := (Status)(__ret)
	return __v
}

// IrdaDeviceGetAddress function as declared in libdivecomputer/irda.h:46
func IrdaDeviceGetAddress(device *IrdaDevice) uint32 {
	cdevice, _ := (*C.dc_irda_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_irda_device_get_address(cdevice)
	__v := (uint32)(__ret)
	return __v
}

// IrdaDeviceGetName function as declared in libdivecomputer/irda.h:53
func IrdaDeviceGetName(device *IrdaDevice) string {
	cdevice, _ := (*C.dc_irda_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_irda_device_get_name(cdevice)
	__v := packPCharString(__ret)
	return __v
}

// IrdaDeviceFree function as declared in libdivecomputer/irda.h:62
func IrdaDeviceFree(device *IrdaDevice) {
	cdevice, _ := (*C.dc_irda_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	C.dc_irda_device_free(cdevice)
}

// IrdaIteratorNew function as declared in libdivecomputer/irda.h:74
func IrdaIteratorNew(iterator **Iterator, context *Context, descriptor *Descriptor) Status {
	citerator, _ := (**C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_irda_iterator_new(citerator, ccontext, cdescriptor)
	__v := (Status)(__ret)
	return __v
}

// IrdaOpen function as declared in libdivecomputer/irda.h:87
func IrdaOpen(iostream **Iostream, context *Context, address uint32, lsap uint32) Status {
	ciostream, _ := (**C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	caddress, _ := (C.uint)(address), cgoAllocsUnknown
	clsap, _ := (C.uint)(lsap), cgoAllocsUnknown
	__ret := C.dc_irda_open(ciostream, ccontext, caddress, clsap)
	__v := (Status)(__ret)
	return __v
}

// SerialDeviceGetName function as declared in libdivecomputer/serial.h:45
func SerialDeviceGetName(device []SerialDevice) string {
	cdevice, _ := (*C.dc_serial_device_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&device)).Data)), cgoAllocsUnknown
	__ret := C.dc_serial_device_get_name(cdevice)
	__v := packPCharString(__ret)
	return __v
}

// SerialDeviceFree function as declared in libdivecomputer/serial.h:54
func SerialDeviceFree(device []SerialDevice) {
	cdevice, _ := (*C.dc_serial_device_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&device)).Data)), cgoAllocsUnknown
	C.dc_serial_device_free(cdevice)
}

// SerialIteratorNew function as declared in libdivecomputer/serial.h:66
func SerialIteratorNew(iterator **Iterator, context *Context, descriptor *Descriptor) Status {
	citerator, _ := (**C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_serial_iterator_new(citerator, ccontext, cdescriptor)
	__v := (Status)(__ret)
	return __v
}

// SerialOpen function as declared in libdivecomputer/serial.h:78
func SerialOpen(iostream **Iostream, context *Context, name string) Status {
	ciostream, _ := (**C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cname, _ := unpackPCharString(name)
	__ret := C.dc_serial_open(ciostream, ccontext, cname)
	__v := (Status)(__ret)
	return __v
}

// UsbhidDeviceGetVid function as declared in libdivecomputer/usbhid.h:46
func UsbhidDeviceGetVid(device *UsbhidDevice) uint32 {
	cdevice, _ := (*C.dc_usbhid_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_usbhid_device_get_vid(cdevice)
	__v := (uint32)(__ret)
	return __v
}

// UsbhidDeviceGetPid function as declared in libdivecomputer/usbhid.h:54
func UsbhidDeviceGetPid(device *UsbhidDevice) uint32 {
	cdevice, _ := (*C.dc_usbhid_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_usbhid_device_get_pid(cdevice)
	__v := (uint32)(__ret)
	return __v
}

// UsbhidDeviceFree function as declared in libdivecomputer/usbhid.h:62
func UsbhidDeviceFree(device *UsbhidDevice) {
	cdevice, _ := (*C.dc_usbhid_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	C.dc_usbhid_device_free(cdevice)
}

// UsbhidIteratorNew function as declared in libdivecomputer/usbhid.h:74
func UsbhidIteratorNew(iterator **Iterator, context *Context, descriptor *Descriptor) Status {
	citerator, _ := (**C.dc_iterator_t)(unsafe.Pointer(iterator)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdescriptor, _ := (*C.dc_descriptor_t)(unsafe.Pointer(descriptor)), cgoAllocsUnknown
	__ret := C.dc_usbhid_iterator_new(citerator, ccontext, cdescriptor)
	__v := (Status)(__ret)
	return __v
}

// UsbhidOpen function as declared in libdivecomputer/usbhid.h:86
func UsbhidOpen(iostream **Iostream, context *Context, device *UsbhidDevice) Status {
	ciostream, _ := (**C.dc_iostream_t)(unsafe.Pointer(iostream)), cgoAllocsUnknown
	ccontext, _ := (*C.dc_context_t)(unsafe.Pointer(context)), cgoAllocsUnknown
	cdevice, _ := (*C.dc_usbhid_device_t)(unsafe.Pointer(device)), cgoAllocsUnknown
	__ret := C.dc_usbhid_open(ciostream, ccontext, cdevice)
	__v := (Status)(__ret)
	return __v
}

// VersionGet function as declared in libdivecomputer/version.h:46
func VersionGet(version *Version) string {
	cversion, _ := version.PassRef()
	__ret := C.dc_version(cversion)
	__v := packPCharString(__ret)
	return __v
}

// VersionGetCheck function as declared in libdivecomputer/version.h:50
func VersionGetCheck(major uint32, minor uint32, micro uint32) int32 {
	cmajor, _ := (C.uint)(major), cgoAllocsUnknown
	cminor, _ := (C.uint)(minor), cgoAllocsUnknown
	cmicro, _ := (C.uint)(micro), cgoAllocsUnknown
	__ret := C.dc_version_check(cmajor, cminor, cmicro)
	__v := (int32)(__ret)
	return __v
}
