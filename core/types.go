// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Fri, 01 Jun 2018 23:25:14 CEST.
// By https://git.io/c-for-go. DO NOT EDIT.

package core

/*
#cgo pkg-config: libdivecomputer
#include <stddef.h>
#include "libdivecomputer/parser.h"
#include "libdivecomputer/device.h"
#include "libdivecomputer/version.h"
#include "libdivecomputer/context.h"
#include "libdivecomputer/descriptor.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Salinity as declared in libdivecomputer/parser.h:137
type Salinity struct {
	Type           Water
	Density        float64
	refc9529d52    *C.dc_salinity_t
	allocsc9529d52 interface{}
}

// Gasmix as declared in libdivecomputer/parser.h:143
type Gasmix struct {
	Helium         float64
	Oxygen         float64
	Nitrogen       float64
	ref71cd323d    *C.dc_gasmix_t
	allocs71cd323d interface{}
}

// Tank as declared in libdivecomputer/parser.h:183
type Tank struct {
	Gasmix         uint32
	Type           Tankvolume
	Volume         float64
	Workpressure   float64
	Beginpressure  float64
	Endpressure    float64
	refadaebb65    *C.dc_tank_t
	allocsadaebb65 interface{}
}

// SampleValue as declared in libdivecomputer/parser.h:216
const sizeofSampleValue = unsafe.Sizeof(C.dc_sample_value_t{})

type SampleValue [sizeofSampleValue]byte

// Parser as declared in libdivecomputer/parser.h:218
type Parser C.dc_parser_t

// SampleCallback type as declared in libdivecomputer/parser.h:220
type SampleCallback func(kind SampleType, value SampleValue, userdata unsafe.Pointer)

// Context as declared in libdivecomputer/context.h:31
type Context C.dc_context_t

// Logfunc type as declared in libdivecomputer/context.h:42
type Logfunc func(context *Context, loglevel Loglevel, file string, line uint32, function string, message string, userdata unsafe.Pointer)

// Descriptor as declared in libdivecomputer/descriptor.h:41
type Descriptor C.dc_descriptor_t

// Iterator as declared in libdivecomputer/iterator.h:31
type Iterator C.dc_iterator_t

// Device as declared in libdivecomputer/device.h:43
type Device C.dc_device_t

// EventProgress as declared in libdivecomputer/device.h:48
type EventProgress struct {
	Current        uint32
	Maximum        uint32
	refb363a956    *C.dc_event_progress_t
	allocsb363a956 interface{}
}

// EventDevinfo as declared in libdivecomputer/device.h:54
type EventDevinfo struct {
	Model          uint32
	Firmware       uint32
	Serial         uint32
	ref72b3861f    *C.dc_event_devinfo_t
	allocs72b3861f interface{}
}

// EventClock as declared in libdivecomputer/device.h:59
type EventClock struct {
	Devtime        uint32
	Systime        Ticks
	refed081ba0    *C.dc_event_clock_t
	allocsed081ba0 interface{}
}

// EventVendor as declared in libdivecomputer/device.h:64
type EventVendor struct {
	Data           string
	Size           uint32
	ref42693bff    *C.dc_event_vendor_t
	allocs42693bff interface{}
}

// CancelCallback type as declared in libdivecomputer/device.h:66
type CancelCallback func(userdata unsafe.Pointer) int32

// EventCallback type as declared in libdivecomputer/device.h:68
type EventCallback func(device *Device, event EventType, data unsafe.Pointer, userdata unsafe.Pointer)

// DiveCallback type as declared in libdivecomputer/device.h:70
type DiveCallback func(data string, size uint32, fingerprint string, fsize uint32, userdata unsafe.Pointer) int32

// Buffer as declared in libdivecomputer/buffer.h:31
type Buffer C.dc_buffer_t

// Ticks type as declared in libdivecomputer/datetime.h:34
type Ticks int64

// Datetime as declared in libdivecomputer/datetime.h:45
type Datetime struct {
	Year           int32
	Month          int32
	Day            int32
	Hour           int32
	Minute         int32
	Second         int32
	Timezone       int32
	reffebe24d5    *C.dc_datetime_t
	allocsfebe24d5 interface{}
}

// Version as declared in libdivecomputer/version.h:44
type Version struct {
	Major          uint32
	Minor          uint32
	Micro          uint32
	refe33ef6f4    *C.dc_version_t
	allocse33ef6f4 interface{}
}
